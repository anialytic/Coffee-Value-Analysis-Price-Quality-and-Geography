p.val< -2*pt(-0,02, df=99, lower.tail=FALSE)
p.val < -2*pt(-0,02, df=99, lower.tail=FALSE)
p.val <- 2*pt(-abs(-0.02), df=99)
p.val < -2*pt(-4.09, df=39, lower.tail=FALSE)
p.val <- 2*pt(-abs(-4.09), df=39)
library(lubridate)
install.packages("lubridate")
library(lubridate)
library(dplyr)
library(ggplot2)
crime <- read.csv("crimes.csv", header = TRUE)
crime <- read.csv("crimes.csv", header = TRUE)
getwd()
crime <- read.csv("C:\Users\HP\Documents\crimes.csv", header = TRUE)
crime <- read.csv("C:/Users/HP/Documents/crimes.csv", header = TRUE)
file.exists("C:/Users/HP/Documents/crimes.csv")
file.exists("C:/Users/HP/Documents/crimes.csv")
crime <- read.csv("C:/Users/HP/Documents/crimes.csv", header = TRUE)
str(crime)
crime$POSIX <- ymd_hms(as.character(crime$Dates))
crime$Dates <- as.Date(ymd_hms(as.character(crime$Dates)))
moon <- read.csv("moon.csv", header = TRUE)
moon <- read.csv("C:/Users/HP/Documents/moon.csv", header = TRUE)
moon$date <- as.Date(moon$date, "%m/%d/%Y")
full_data <- merge(crime, moon, by.x = "Dates", by.y="date")
full_data <- inner_join(crime, moon, by=c("Dates"="date"))
date_phase <- full_data %>%
group_by(Dates, phase) %>%
count() %>%
arrange(desc(n))
glimpse(date_phase)
library(ggplot2)
ggplot(date_phase, aes(Dates, n)) +
geom_line(alpha = 0.5) +
labs(title = "Злочини в Сан-Франциско (2003-2015)",
x = "Дата",
y = "Кількість злочинів") +
geom_point(data = date_phase[date_phase$phase == "Full M
oon", ], color = "red") +
geom_smooth()
library(ggplot2)
ggplot(date_phase, aes(Dates, n)) +
geom_line(alpha = 0.5) +
labs(title = "Злочини в Сан-Франциско (2003-2015)",
x = "Дата",
y = "Кількість злочинів") +
geom_point(data = date_phase[date_phase$phase == "Full Moon", ], color = "red") +
geom_smooth()
x <- mean(date_phase$n[date_phase$phase == "Full Moon"])
x
mu <- mean(date_phase$n[date_phase$phase != "Full Moon"])
mu
n <- length(date_phase$n[date_phase$phase == "Full Moon"])
n
s <- sd(date_phase$n[date_phase$phase == "Full Moon"])
s
p_value <- 2*pt(0.839, df=76, lower.tail = FALSE)
p_value
x_vector <- date_phase$n[date_phase$phase == "Full Moon"]
t.test(x_vector, mu = 391.75, alternative = "two.sided", conf.level = 0.95)
day_of_week_crimes <- full_data %>%
group_by(DayOfWeek) %>%
count()
glimpse(day_of_week_crimes)
ggplot(data=day_of_week_crimes, aes(x=DayOfWeek, y=n)) + geom_bar(stat="identity", fill="lightblue")
day_of_week_crimes$DayOfWeek <- factor(day_of_week_crimes$DayOfWeek , levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
ggplot(data=day_of_week_crimes, aes(x=DayOfWeek, y=n)) + geom_bar(stat="identity", fill="light blue")
crimes_by_day <- full_data %>%
group_by(Dates, DayOfWeek) %>%
count()
sample_vector <- crimes_by_day$n[crimes_by_day$DayOfWeek == "Friday"]
day_of_week_crimes$DayOfWeek <- factor(day_of_week_crimes$DayOfWeek , levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
ggplot(data=day_of_week_crimes, aes(x=DayOfWeek, y=n)) + geom_bar(stat="identity", fill="light blue")
View(day_of_week_crimes)
crimes_by_day <- full_data %>%
group_by(Dates, DayOfWeek) %>%
count()
sample_vector <- crimes_by_day$n[crimes_by_day$DayOfWeek == "Friday"]
sample_vector <- crimes_by_day$n[crimes_by_day$DayOfWeek == "Friday"]
# Розмір вибірки
n <- length(sample_vector)
n  # показати кількість спостережень
# Ступінь вільності
df <- n - 1
df
getwd()
library(dplyr)
library(ggplot2)
coffee <- read.csv('top-rated-coffee-clean.csv')
coffee <- read.csv('C:/Users/HP/Desktop/Coffee/top-rated-coffee-clean.csv')
coffee <- read.csv("C://Users//HP//Desktop//Coffee//top-rated-coffee-clean.csv")
coffee <- read.csv('top-rated-coffee-pp100(enc).csv')
coffee <- read.csv("C://Users//HP//Desktop//Coffee//top-rated-coffee-pp100(enc).csv")
coffee <- read.csv("top-rated-coffee-pp100(enc).csv", header = TRUE, sep = ";", fill = TRUE)
getwd()
coffee <- read.csv('top-rated-coffee-pp100g(enc).csv')
coffee <- read.csv("C://Users//HP//Desktop//Coffee//top-rated-coffee-pp100g(enc).csv")
coffee <- read.csv("top-rated-coffee-pp100g(enc).csv", header = TRUE, sep = ";", fill = TRUE)
readLines("top-rated-coffee-pp100g(enc).csv", n = 10)
mean(coffee$price_per_100g, na.rm = TRUE)
mean(coffee$price_per_100g)
class(coffee$price_per_100g)
mean(as.numeric(coffee$price_per_100g), na.rm = TRUE)
median(coffee$price_per_100g)
min(coffee$price_per_100g)
max(coffee$price_per_100g)
range(coffee$price_per_100g)
var(coffee$price_per_100g)
sd(coffee$price_per_100g)
summary(coffee$price_per_100g)
median(coffee$price_per_100g, na.rm = TRUE) # [1] "39,68"(до , na.rm = TRUE)
# мінімальна ціна за 100 г
min(coffee$price_per_100g, na.rm = TRUE)    # [1] ""(до , na.rm = TRUE)
# TODO: як уникнути порожнього значення
# максимальна ціна за 100 г
max(coffee$price_per_100g, na.rm = TRUE)    #[1] "99,21"(до , na.rm = TRUE)
# діапазон (мін, макс)
range(coffee$price_per_100g, na.rm = TRUE)  # [1] ""      "99,21"(до , na.rm = TRUE)
# дисперсія
var(coffee$price_per_100g, na.rm = TRUE)    # [1] NA(до , na.rm = TRUE)
# стандартне відхилення
sd(coffee$price_per_100g, na.rm = TRUE)
coffee %>%
slice_max(n=10, price_per_100g) %>%
arrange(desc(price_per_100g))
coffee %>%
slice_min(n=10, price_per_100g) %>%
arrange(desc(price_per_100g))
coffee %>%
slice_min(n=10, price_per_100g,na.rm = TRUE) %>%
arrange(desc(price_per_100g))
coffee %>%
slice_max(n=10, price_per_100g) %>%
arrange(desc(price_per_100g))
coffee_clean <- coffee[!is.na(coffee$country) & coffee$country != "", ]
coffee_counts <- table(coffee_clean$country)
barplot(coffee_counts,
las = 2,
col = "pink",
main = "Кількість типів кави по країнах",
ylab = "Кількість типів")
coffee$price_per_100g <- gsub(",", ".", coffee$price_per_100g)
barplot(coffee_counts,
las = 2,
col = "pink",
main = "Кількість типів кави по країнах",
ylab = "Кількість типів")
coffee$price_per_100g[coffee$price_per_100g == ""] <- NA
barplot(coffee_counts,
las = 2,
col = "pink",
main = "Кількість типів кави по країнах",
ylab = "Кількість типів")
coffee$price_per_100g <- as.numeric(coffee$price_per_100g)
barplot(coffee_counts,
las = 2,
col = "pink",
main = "Кількість типів кави по країнах",
ylab = "Кількість типів")
coffee_clean <- coffee[!is.na(coffee$country) & !is.na(coffee$price_per_100g), ]
barplot(coffee_counts,
las = 2,
col = "pink",
main = "Кількість типів кави по країнах",
ylab = "Кількість типів")
summary(coffee_clean$price_per_100g)
table(coffee_clean$country)
coffee$price_per_100g <- gsub(",", ".", coffee$price_per_100g)
# замінити порожні рядки на NA
coffee$price_per_100g[coffee$price_per_100g == ""] <- NA
# перетворити у числове значення
coffee$price_per_100g <- as.numeric(coffee$price_per_100g)
# перевірити колонку країни
coffee$country[coffee$country == ""] <- NA
summary(coffee_clean$price_per_100g)
table(coffee_clean$country)
library(dplyr)
library(ggplot2)
coffee <- read.csv('cleaned_top-rated-coffee-pp100g(enc).csv')
readLines("cleaned_top-rated-coffee-pp100g(enc).csv", n = 10)
coffee <- read.csv("C://Users//HP//Desktop//Coffee//cleaned_top-rated-coffee-pp100g(enc).csv")
coffee <- read.csv("cleaned_top-rated-coffee-pp100g(enc).csv", header = TRUE, sep = ";", fill = TRUE)
country_counts <- as.data.frame(table(df$Country))
names(df)
coffee <- read.csv("cleaned_top-rated-coffee-pp100g(enc).csv", header = TRUE, sep = ";", fill = TRUE)
readLines("cleaned_top-rated-coffee-pp100g(enc).csv", n = 10)
median(coffee$price_per_100g, na.rm = TRUE)
coffee %>%
slice_max(n=10, price_per_100g) %>%
arrange(desc(price_per_100g))
names(df)
country_counts <- as.data.frame(table(df$Country))
df <- read.csv("cleaned_data.csv", sep=";", header=FALSE, stringsAsFactors = FALSE)
df <- read.csv("cleaned_top-rated-coffee-pp100g(enc).csv", sep=";", header=FALSE, stringsAsFactors = FALSE)
colnames(df) <- c("coffee_name",	"total_score",	"roaster_location",	"coffee_origin",	"roast_level",	"est._price",	"agtron_ground",	"agtron_roast",	"price_per_100g",	"price_per_ounce",	"origin_country",	"clean_location",	"Country")
names(df)
head(df)
country_counts <- as.data.frame(table(df$Country))
ggplot(country_counts, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity", "pink) +
labs(x = "Країна", y = "Кількість", title = "Кількість кави по країнах") +
ggplot(country_counts, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity", "pink"") +
labs(x = "Країна", y = "Кількість", title = "Кількість кави по країнах") +
ggplot(country_counts, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity", "pink") +
labs(x = "Країна", y = "Кількість", title = "Кількість кави по країнах") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(country_counts, aes(x = reorder(Var1, -Freq), y = Freq)) +
geom_bar(stat = "identity", fill = "pink") +
labs(x = "Країна", y = "Кількість", title = "Кількість кави по країнах") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
